# Generated by Django 4.2.25 on 2025-10-15 07:57

from django.db import migrations, models
import uuid


def gen_uuid(apps, schema_editor):
    # Populate the temporary uuid_field column for each model
    CustomerProfile = apps.get_model('profiles', 'CustomerProfile')
    for row in CustomerProfile.objects.all():
        row.uuid_field = uuid.uuid4()
        row.save(update_fields=['uuid_field'])
        
    VendorProfile = apps.get_model('profiles', 'VendorProfile')
    for row in VendorProfile.objects.all():
        row.uuid_field = uuid.uuid4()
        row.save(update_fields=['uuid_field'])


class Migration(migrations.Migration):

    dependencies = [
        ('profiles', '0001_initial'),
    ]

    operations = [
        # First add a temporary UUID field
        migrations.AddField(
            model_name='customerprofile',
            name='uuid_field',
            field=models.UUIDField(default=uuid.uuid4, null=True),
        ),
        migrations.AddField(
            model_name='vendorprofile',
            name='uuid_field',
            field=models.UUIDField(default=uuid.uuid4, null=True),
        ),
        
        # Run the function to generate UUIDs
        migrations.RunPython(gen_uuid),
        
        # First, dynamically drop foreign key constraints and add temporary UUID columns
        migrations.RunSQL(
            sql=[
                '''DO $$
                DECLARE r RECORD;
                BEGIN
                  FOR r IN (
                    SELECT conname, conrelid::regclass AS table_name
                    FROM pg_constraint
                    WHERE contype = 'f'
                      AND (
                        conrelid::regclass::text LIKE 'profiles_%' OR
                        confrelid::regclass::text = 'accounts_user'
                      )
                  ) LOOP
                    EXECUTE format('ALTER TABLE %s DROP CONSTRAINT IF EXISTS %I', r.table_name, r.conname);
                  END LOOP;
                END $$;''',
                # Add temporary UUID columns to hold converted FK values
                "ALTER TABLE profiles_customerprofile ADD COLUMN IF NOT EXISTS user_uuid uuid NULL;",
                "ALTER TABLE profiles_vendorprofile ADD COLUMN IF NOT EXISTS user_uuid uuid NULL;",
            ],
            reverse_sql=[
                # One-way operation
                "SELECT 1;"
            ]
        ),
        
        # Update foreign key references to use UUIDs (before changing PK types)
        migrations.RunSQL(
            sql=[
                # Update foreign key values to use UUIDs
                "UPDATE profiles_customerprofile SET user_uuid = (SELECT uuid_field FROM accounts_user WHERE accounts_user.id = profiles_customerprofile.user_id) WHERE user_id IS NOT NULL;",
                "UPDATE profiles_vendorprofile SET user_uuid = (SELECT uuid_field FROM accounts_user WHERE accounts_user.id = profiles_vendorprofile.user_id) WHERE user_id IS NOT NULL;",
                
                # Alter foreign key columns to use UUID type
                "ALTER TABLE profiles_customerprofile ALTER COLUMN user_id TYPE uuid USING user_uuid;",
                "ALTER TABLE profiles_vendorprofile ALTER COLUMN user_id TYPE uuid USING user_uuid;",
                
                # Drop temporary UUID columns
                "ALTER TABLE profiles_customerprofile DROP COLUMN user_uuid;",
                "ALTER TABLE profiles_vendorprofile DROP COLUMN user_uuid;",
            ],
            reverse_sql=[
                # This is a one-way operation, no reverse
            ]
        ),
        
        # Now alter the ID fields to use UUID (after FK updates)
        migrations.RunSQL(
            sql=[
                "ALTER TABLE profiles_customerprofile ALTER COLUMN id DROP IDENTITY IF EXISTS;",
                "ALTER TABLE profiles_customerprofile ALTER COLUMN id DROP DEFAULT;",
                "ALTER TABLE profiles_customerprofile ALTER COLUMN id TYPE uuid USING uuid_field;",
                
                
                "ALTER TABLE profiles_vendorprofile ALTER COLUMN id DROP IDENTITY IF EXISTS;",
                "ALTER TABLE profiles_vendorprofile ALTER COLUMN id DROP DEFAULT;",
                "ALTER TABLE profiles_vendorprofile ALTER COLUMN id TYPE uuid USING uuid_field;",
                
            ],
            reverse_sql=[
                # This is a one-way operation, no reverse
            ]
        ),
        
        # Drop the temporary UUID field
        migrations.RemoveField(
            model_name='customerprofile',
            name='uuid_field',
        ),
        migrations.RemoveField(
            model_name='vendorprofile',
            name='uuid_field',
        ),
        
        # Update the model fields to use UUID
        migrations.AlterField(
            model_name='customerprofile',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='vendorprofile',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
        ),
    ]
