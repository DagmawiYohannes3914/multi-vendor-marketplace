# Generated by Django 4.2.25 on 2025-10-15 07:57

from django.db import migrations, models
import uuid
from django.db.models import F


def gen_uuid(apps, schema_editor):
    # Populate the temporary uuid_field column for each model
    Category = apps.get_model('products', 'Category')
    for row in Category.objects.all():
        row.uuid_field = uuid.uuid4()
        row.save(update_fields=['uuid_field'])
        
    Product = apps.get_model('products', 'Product')
    for row in Product.objects.all():
        row.uuid_field = uuid.uuid4()
        row.save(update_fields=['uuid_field'])
        
    ProductImage = apps.get_model('products', 'ProductImage')
    for row in ProductImage.objects.all():
        row.uuid_field = uuid.uuid4()
        row.save(update_fields=['uuid_field'])
        
    SKU = apps.get_model('products', 'SKU')
    for row in SKU.objects.all():
        row.uuid_field = uuid.uuid4()
        row.save(update_fields=['uuid_field'])
        
    InventoryTransaction = apps.get_model('products', 'InventoryTransaction')
    for row in InventoryTransaction.objects.all():
        row.uuid_field = uuid.uuid4()
        row.save(update_fields=['uuid_field'])
        
    ProductRating = apps.get_model('products', 'ProductRating')
    for row in ProductRating.objects.all():
        row.uuid_field = uuid.uuid4()
        row.save(update_fields=['uuid_field'])


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0001_initial'),
    ]

    operations = [
        # First add a temporary UUID field
        migrations.AddField(
            model_name='category',
            name='uuid_field',
            field=models.UUIDField(default=uuid.uuid4, null=True),
        ),
        migrations.AddField(
            model_name='inventorytransaction',
            name='uuid_field',
            field=models.UUIDField(default=uuid.uuid4, null=True),
        ),
        migrations.AddField(
            model_name='product',
            name='uuid_field',
            field=models.UUIDField(default=uuid.uuid4, null=True),
        ),
        migrations.AddField(
            model_name='productimage',
            name='uuid_field',
            field=models.UUIDField(default=uuid.uuid4, null=True),
        ),
        migrations.AddField(
            model_name='productrating',
            name='uuid_field',
            field=models.UUIDField(default=uuid.uuid4, null=True),
        ),
        migrations.AddField(
            model_name='sku',
            name='uuid_field',
            field=models.UUIDField(default=uuid.uuid4, null=True),
        ),
        
        # Run the function to generate UUIDs
        migrations.RunPython(gen_uuid),
        
        # First, handle foreign key constraints dynamically and add temporary UUID columns
        migrations.RunSQL(
            sql=[
                # Dynamically drop ALL FK constraints involving products_* tables
                '''DO $$
                DECLARE r RECORD;
                BEGIN
                  FOR r IN (
                    SELECT conname, conrelid::regclass AS table_name
                    FROM pg_constraint
                    WHERE contype = 'f'
                      AND (
                        conrelid::regclass::text LIKE 'products_%' OR
                        confrelid::regclass::text LIKE 'products_%'
                      )
                  ) LOOP
                    EXECUTE format('ALTER TABLE %s DROP CONSTRAINT IF EXISTS %I', r.table_name, r.conname);
                  END LOOP;
                END $$;''',
                # Add temporary UUID columns to hold converted FK values
                "ALTER TABLE products_category ADD COLUMN IF NOT EXISTS parent_uuid uuid NULL;",
                "ALTER TABLE products_product ADD COLUMN IF NOT EXISTS category_uuid uuid NULL;",
                "ALTER TABLE products_productimage ADD COLUMN IF NOT EXISTS product_uuid uuid NULL;",
                "ALTER TABLE products_productrating ADD COLUMN IF NOT EXISTS product_uuid uuid NULL;",
                "ALTER TABLE products_sku ADD COLUMN IF NOT EXISTS product_uuid uuid NULL;",
                "ALTER TABLE products_inventorytransaction ADD COLUMN IF NOT EXISTS sku_uuid uuid NULL;",
            ],
            reverse_sql=[
                # One-way operation
                "SELECT 1;"
            ]
        ),
        
        # Update foreign key references to use UUIDs (before changing PK types)
        migrations.RunSQL(
            sql=[
                # Update foreign key values to use UUIDs
                "UPDATE products_category SET parent_uuid = (SELECT uuid_field FROM products_category pc WHERE pc.id = products_category.parent_id) WHERE parent_id IS NOT NULL;",
                "UPDATE products_product SET category_uuid = (SELECT uuid_field FROM products_category WHERE products_category.id = products_product.category_id) WHERE category_id IS NOT NULL;",
                "UPDATE products_productimage SET product_uuid = (SELECT uuid_field FROM products_product WHERE products_product.id = products_productimage.product_id) WHERE product_id IS NOT NULL;",
                "UPDATE products_productrating SET product_uuid = (SELECT uuid_field FROM products_product WHERE products_product.id = products_productrating.product_id) WHERE product_id IS NOT NULL;",
                "UPDATE products_sku SET product_uuid = (SELECT uuid_field FROM products_product WHERE products_product.id = products_sku.product_id) WHERE product_id IS NOT NULL;",
                "UPDATE products_inventorytransaction SET sku_uuid = (SELECT uuid_field FROM products_sku WHERE products_sku.id = products_inventorytransaction.sku_id) WHERE sku_id IS NOT NULL;",
                
                # Alter foreign key columns to use UUID type
                "ALTER TABLE products_category ALTER COLUMN parent_id TYPE uuid USING parent_uuid;",
                "ALTER TABLE products_product ALTER COLUMN category_id TYPE uuid USING category_uuid;",
                "ALTER TABLE products_productimage ALTER COLUMN product_id TYPE uuid USING product_uuid;",
                "ALTER TABLE products_productrating ALTER COLUMN product_id TYPE uuid USING product_uuid;",
                "ALTER TABLE products_sku ALTER COLUMN product_id TYPE uuid USING product_uuid;",
                "ALTER TABLE products_inventorytransaction ALTER COLUMN sku_id TYPE uuid USING sku_uuid;",
                
                "ALTER TABLE products_inventorytransaction DROP COLUMN created_by_id;",
                "ALTER TABLE products_inventorytransaction ADD COLUMN created_by_id uuid NULL;",
                "ALTER TABLE products_productrating DROP COLUMN user_id;",
                "ALTER TABLE products_productrating ADD COLUMN user_id uuid NOT NULL;",
            ],
            reverse_sql=[
                # This is a one-way operation, no reverse
            ]
        ),

        # Now alter the ID fields to use UUID (after FK updates)
        migrations.RunSQL(
            sql=[
                "ALTER TABLE products_category ALTER COLUMN id DROP IDENTITY IF EXISTS;",
                "ALTER TABLE products_category ALTER COLUMN id DROP DEFAULT;",
                "ALTER TABLE products_category ALTER COLUMN id TYPE uuid USING uuid_field;",
                
                "ALTER TABLE products_inventorytransaction ALTER COLUMN id DROP IDENTITY IF EXISTS;",
                "ALTER TABLE products_inventorytransaction ALTER COLUMN id DROP DEFAULT;",
                "ALTER TABLE products_inventorytransaction ALTER COLUMN id TYPE uuid USING uuid_field;",
                
                "ALTER TABLE products_product ALTER COLUMN id DROP IDENTITY IF EXISTS;",
                "ALTER TABLE products_product ALTER COLUMN id DROP DEFAULT;",
                "ALTER TABLE products_product ALTER COLUMN id TYPE uuid USING uuid_field;",
                
                "ALTER TABLE products_productimage ALTER COLUMN id DROP IDENTITY IF EXISTS;",
                "ALTER TABLE products_productimage ALTER COLUMN id DROP DEFAULT;",
                "ALTER TABLE products_productimage ALTER COLUMN id TYPE uuid USING uuid_field;",
                
                "ALTER TABLE products_productrating ALTER COLUMN id DROP IDENTITY IF EXISTS;",
                "ALTER TABLE products_productrating ALTER COLUMN id DROP DEFAULT;",
                "ALTER TABLE products_productrating ALTER COLUMN id TYPE uuid USING uuid_field;",
                
                "ALTER TABLE products_sku ALTER COLUMN id DROP IDENTITY IF EXISTS;",
                "ALTER TABLE products_sku ALTER COLUMN id DROP DEFAULT;",
                "ALTER TABLE products_sku ALTER COLUMN id TYPE uuid USING uuid_field;",
            ],
            reverse_sql=[
                # This is a one-way operation, no reverse
            ]
        ),

        # Recreate foreign key constraints now that PKs are UUID, and drop temp columns
        migrations.RunSQL(
            sql=[
                "ALTER TABLE products_category ADD CONSTRAINT products_category_parent_id_fk FOREIGN KEY (parent_id) REFERENCES products_category(id);",
                "ALTER TABLE products_product ADD CONSTRAINT products_product_category_id_fk FOREIGN KEY (category_id) REFERENCES products_category(id);",
                "ALTER TABLE products_productimage ADD CONSTRAINT products_productimage_product_id_fk FOREIGN KEY (product_id) REFERENCES products_product(id);",
                "ALTER TABLE products_productrating ADD CONSTRAINT products_productrating_product_id_fk FOREIGN KEY (product_id) REFERENCES products_product(id);",
                "ALTER TABLE products_sku ADD CONSTRAINT products_sku_product_id_fk FOREIGN KEY (product_id) REFERENCES products_product(id);",
                "ALTER TABLE products_inventorytransaction ADD CONSTRAINT products_inventorytransaction_sku_id_fk FOREIGN KEY (sku_id) REFERENCES products_sku(id);",
                
                
                # Drop temporary UUID columns
                "ALTER TABLE products_category DROP COLUMN parent_uuid;",
                "ALTER TABLE products_product DROP COLUMN category_uuid;",
                "ALTER TABLE products_productimage DROP COLUMN product_uuid;",
                "ALTER TABLE products_productrating DROP COLUMN product_uuid;",
                "ALTER TABLE products_sku DROP COLUMN product_uuid;",
                "ALTER TABLE products_inventorytransaction DROP COLUMN sku_uuid;",
            ],
            reverse_sql=[
                # One-way operation
                "SELECT 1;"
            ]
        ),
        
        # Drop the temporary UUID field
        migrations.RemoveField(
            model_name='category',
            name='uuid_field',
        ),
        migrations.RemoveField(
            model_name='inventorytransaction',
            name='uuid_field',
        ),
        migrations.RemoveField(
            model_name='product',
            name='uuid_field',
        ),
        migrations.RemoveField(
            model_name='productimage',
            name='uuid_field',
        ),
        migrations.RemoveField(
            model_name='productrating',
            name='uuid_field',
        ),
        migrations.RemoveField(
            model_name='sku',
            name='uuid_field',
        ),
        
        # Update the model fields to use UUID
        migrations.AlterField(
            model_name='category',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='inventorytransaction',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='product',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='productimage',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='productrating',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='sku',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
        ),
    ]
